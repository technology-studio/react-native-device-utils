// flow-typed signature: 1c2713a7de5a8bebaff29c6b4afa976d
// flow-typed version: <<STUB>>/react-native-keychain_v3.0.0/flow_v0.89.0

/**
 * This is an autogenerated libdef stub for:
 *
 *   'react-native-keychain'
 *
 * Fill this stub out by replacing all the `any` types.
 *
 * Once filled out, we encourage you to share your work with the
 * community by sending a pull request to:
 * https://github.com/flowtype/flow-typed
 */

import { NativeModules, Platform } from "react-native";

declare module 'react-native-keychain' {
  // @flow
  declare export var ACCESSIBLE: {
  	AFTER_FIRST_UNLOCK: string,
  	AFTER_FIRST_UNLOCK_THIS_DEVICE_ONLY: string,
  	ALWAYS: string,
  	ALWAYS_THIS_DEVICE_ONLY: string,
  	WHEN_PASSCODE_SET_THIS_DEVICE_ONLY: string,
  	WHEN_UNLOCKED: string,
  	WHEN_UNLOCKED_THIS_DEVICE_ONLY: string
  };
  declare export var ACCESS_CONTROL: {
  	APPLICATION_PASSWORD: string,
  	BIOMETRY_ANY: string,
  	BIOMETRY_ANY_OR_DEVICE_PASSCODE: string,
  	BIOMETRY_CURRENT_SET: string,
  	BIOMETRY_CURRENT_SET_OR_DEVICE_PASSCODE: string,
  	DEVICE_PASSCODE: string,
  	USER_PRESENCE: string
  };
  declare export var AUTHENTICATION_TYPE: {
  	BIOMETRICS: string,
  	DEVICE_PASSCODE_OR_BIOMETRICS: string
  };
  declare export var BIOMETRY_TYPE: {
  	FACE_ID: string,
  	FINGERPRINT: string,
  	TOUCH_ID: string
  };
  declare export type LAPolicy = mixed /* UNEXPECTED TYPE: EvalT */ ;
  declare export type Options = {
  	accessControl?: mixed /* UNEXPECTED TYPE: EvalT */ ,
  	accessGroup?: string,
  	accessible?: mixed /* UNEXPECTED TYPE: EvalT */ ,
  	authenticationPrompt?: string,
  	authenticationType?: mixed /* UNEXPECTED TYPE: EvalT */ ,
  	service?: string
  };
  declare export type SecAccessControl = mixed /* UNEXPECTED TYPE: EvalT */ ;
  declare export type SecAccessible = mixed /* UNEXPECTED TYPE: EvalT */ ;
  declare export type SharedWebCredentials = $Exact < {+password: string,
  	+server: string,
  	+username: string
  } > ;
  declare export type UserCredentials = $Exact < {+password: string,
  	+username: string
  } > ;
  declare export function canImplyAuthentication(options?: {
  	accessControl?: mixed /* UNEXPECTED TYPE: EvalT */ ,
  	accessGroup?: string,
  	accessible?: mixed /* UNEXPECTED TYPE: EvalT */ ,
  	authenticationPrompt?: string,
  	authenticationType?: mixed /* UNEXPECTED TYPE: EvalT */ ,
  	service?: string
  }): Promise < boolean > ;
  declare export function getGenericPassword(serviceOrOptions?: string | {
  	accessControl?: mixed /* UNEXPECTED TYPE: EvalT */ ,
  	accessGroup?: string,
  	accessible?: mixed /* UNEXPECTED TYPE: EvalT */ ,
  	authenticationPrompt?: string,
  	authenticationType?: mixed /* UNEXPECTED TYPE: EvalT */ ,
  	service?: string
  }): Promise < boolean | $Exact < {+password: string,
  	+server: string,
  	+username: string
  } >> ;
  declare export function getInternetCredentials(server: string, options?: {
  	accessControl?: mixed /* UNEXPECTED TYPE: EvalT */ ,
  	accessGroup?: string,
  	accessible?: mixed /* UNEXPECTED TYPE: EvalT */ ,
  	authenticationPrompt?: string,
  	authenticationType?: mixed /* UNEXPECTED TYPE: EvalT */ ,
  	service?: string
  }): Promise < $Exact < {+password: string,
  	+username: string
  } >> ;
  declare export function getSupportedBiometryType(): Promise < ?mixed /* UNEXPECTED TYPE: EvalT */ > ;
  declare export function hasInternetCredentials(server: string): Promise < boolean > ;
  declare export function requestSharedWebCredentials(): Promise < $Exact < {
    +password: string,
  	+server: string,
  	+username: string
  } >> ;
  declare export function resetGenericPassword(serviceOrOptions?: string | {
  	accessControl?: mixed /* UNEXPECTED TYPE: EvalT */ ,
  	accessGroup?: string,
  	accessible?: mixed /* UNEXPECTED TYPE: EvalT */ ,
  	authenticationPrompt?: string,
  	authenticationType?: mixed /* UNEXPECTED TYPE: EvalT */ ,
  	service?: string
  }): Promise < boolean > ;
  declare export function resetInternetCredentials(server: string, options?: {
  	accessControl?: mixed /* UNEXPECTED TYPE: EvalT */ ,
  	accessGroup?: string,
  	accessible?: mixed /* UNEXPECTED TYPE: EvalT */ ,
  	authenticationPrompt?: string,
  	authenticationType?: mixed /* UNEXPECTED TYPE: EvalT */ ,
  	service?: string
  }): Promise < void > ;
  declare export function setGenericPassword(username: string, password: string, serviceOrOptions?: string | {
  	accessControl?: mixed /* UNEXPECTED TYPE: EvalT */ ,
  	accessGroup?: string,
  	accessible?: mixed /* UNEXPECTED TYPE: EvalT */ ,
  	authenticationPrompt?: string,
  	authenticationType?: mixed /* UNEXPECTED TYPE: EvalT */ ,
  	service?: string
  }): Promise < boolean > ;
  declare export function setInternetCredentials(server: string, username: string, password: string, options?: {
  	accessControl?: mixed /* UNEXPECTED TYPE: EvalT */ ,
  	accessGroup?: string,
  	accessible?: mixed /* UNEXPECTED TYPE: EvalT */ ,
  	authenticationPrompt?: string,
  	authenticationType?: mixed /* UNEXPECTED TYPE: EvalT */ ,
  	service?: string
  }): Promise < void > ;
  declare export function setSharedWebCredentials(server: string, username: string, password: string): Promise < void > ;

}
